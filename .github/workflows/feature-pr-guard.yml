name: feature-pr-guard
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: read
  pull-requests: read

jobs:
  guard:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head = pr.head.ref;
            const base = pr.base.ref;

            // Only check feature branches
            if (!head.startsWith('feature/')) {
              core.info('Not a feature/* â€” guard skipped.');
              return;
            }

            // 1) Prevent wrong target
            if (base !== 'develop') {
              core.setFailed(`Feature PRs must target 'develop' (current: '${base}').`);
              return;
            }

            // 2) Prevent version bump in package.json (Root)
            async function readJsonAt(ref, path) {
              try {
                const { data } = await github.rest.repos.getContent({ owner, repo, path, ref });
                const buf = Buffer.from(data.content, data.encoding || 'base64');
                return JSON.parse(buf.toString('utf8'));
              } catch (e) {
                if (e.status === 404) return null;
                throw e;
              }
            }
            const basePkg = await readJsonAt(pr.base.sha, 'package.json');
            const headPkg = await readJsonAt(pr.head.sha, 'package.json');

            if (basePkg && headPkg && basePkg.version !== headPkg.version) {
              core.setFailed(`Version change in package.json found (${basePkg.version} -> ${headPkg.version}). Version bumps are only allowed in release/hotfix.`);
              return;
            }

            core.info('Feature PR checks OK.');
