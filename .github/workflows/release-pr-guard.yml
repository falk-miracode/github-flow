name: release-pr-guard
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  guard:
    name: Release/Hotfix PR Guard
    if: |
      startsWith(github.event.pull_request.head.ref, 'release/') ||
      startsWith(github.event.pull_request.head.ref, 'hotfix/')
    runs-on: ubuntu-latest
    steps:
      - name: Validate semver and tag uniqueness
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const head = pr.head.ref;
            const semverRe = /^(?:release|hotfix)\/((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-(?:0|[1-9]\d*|\d*[A-Za-z-][0-9A-Za-z-]*)(?:\.(?:0|[1-9]\d*|\d*[A-Za-z-][0-9A-Za-z-]*))*)?(?:\+[0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*)?)$/;
            const m = head.match(semverRe);
            if (!m) core.setFailed('Branch name without valid SemVer: expected release/x.y.z[-pre][+build] or hotfix/x.y.z[-pre][+build]');
            const version = m[1];
            const tag = `v${version}`;

            // Tag exists?
            let tagExists = false;
            try { await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}` }); tagExists = true; }
            catch (e) { if (e.status !== 404) throw e; }

            // Release exists?
            let releaseExists = false;
            try { await github.rest.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag }); releaseExists = true; }
            catch (e) { if (e.status !== 404) throw e; }

            if (tagExists || releaseExists) {
              core.setFailed(`Tag/Release ${tag} already exists â€“ PR must not be merged.`);
            } else {
              core.info(`OK: ${tag} is available.`);
            }
